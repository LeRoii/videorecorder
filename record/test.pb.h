// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class msg_bag;
class serial_msg;

enum serial_msg_Msg_type {
  serial_msg_Msg_type_GPS = 0,
  serial_msg_Msg_type_POSE = 1,
  serial_msg_Msg_type_VIEWANGLE = 2,
  serial_msg_Msg_type_OTHER = 3,
  serial_msg_Msg_type_serial_msg_Msg_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  serial_msg_Msg_type_serial_msg_Msg_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool serial_msg_Msg_type_IsValid(int value);
const serial_msg_Msg_type serial_msg_Msg_type_Msg_type_MIN = serial_msg_Msg_type_GPS;
const serial_msg_Msg_type serial_msg_Msg_type_Msg_type_MAX = serial_msg_Msg_type_OTHER;
const int serial_msg_Msg_type_Msg_type_ARRAYSIZE = serial_msg_Msg_type_Msg_type_MAX + 1;

// ===================================================================

class serial_msg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.serial_msg) */ {
 public:
  serial_msg();
  virtual ~serial_msg();

  serial_msg(const serial_msg& from);

  inline serial_msg& operator=(const serial_msg& from) {
    CopyFrom(from);
    return *this;
  }

  static const serial_msg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const serial_msg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(serial_msg* other);

  // implements Message ----------------------------------------------

  inline serial_msg* New() const { return New(NULL); }

  serial_msg* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const serial_msg& from);
  void MergeFrom(const serial_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(serial_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef serial_msg_Msg_type Msg_type;
  static const Msg_type GPS =
    serial_msg_Msg_type_GPS;
  static const Msg_type POSE =
    serial_msg_Msg_type_POSE;
  static const Msg_type VIEWANGLE =
    serial_msg_Msg_type_VIEWANGLE;
  static const Msg_type OTHER =
    serial_msg_Msg_type_OTHER;
  static inline bool Msg_type_IsValid(int value) {
    return serial_msg_Msg_type_IsValid(value);
  }
  static const Msg_type Msg_type_MIN =
    serial_msg_Msg_type_Msg_type_MIN;
  static const Msg_type Msg_type_MAX =
    serial_msg_Msg_type_Msg_type_MAX;
  static const int Msg_type_ARRAYSIZE =
    serial_msg_Msg_type_Msg_type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional .pb.serial_msg.Msg_type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::pb::serial_msg_Msg_type type() const;
  void set_type(::pb::serial_msg_Msg_type value);

  // optional uint32 len = 3;
  void clear_len();
  static const int kLenFieldNumber = 3;
  ::google::protobuf::uint32 len() const;
  void set_len(::google::protobuf::uint32 value);

  // optional bytes body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:pb.serial_msg)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::uint64 timestamp_;
  int type_;
  ::google::protobuf::uint32 len_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_test_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_test_2eproto();
  #endif
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static serial_msg* default_instance_;
};
// -------------------------------------------------------------------

class msg_bag : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.msg_bag) */ {
 public:
  msg_bag();
  virtual ~msg_bag();

  msg_bag(const msg_bag& from);

  inline msg_bag& operator=(const msg_bag& from) {
    CopyFrom(from);
    return *this;
  }

  static const msg_bag& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const msg_bag* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(msg_bag* other);

  // implements Message ----------------------------------------------

  inline msg_bag* New() const { return New(NULL); }

  msg_bag* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const msg_bag& from);
  void MergeFrom(const msg_bag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(msg_bag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.serial_msg msgs = 1;
  int msgs_size() const;
  void clear_msgs();
  static const int kMsgsFieldNumber = 1;
  const ::pb::serial_msg& msgs(int index) const;
  ::pb::serial_msg* mutable_msgs(int index);
  ::pb::serial_msg* add_msgs();
  ::google::protobuf::RepeatedPtrField< ::pb::serial_msg >*
      mutable_msgs();
  const ::google::protobuf::RepeatedPtrField< ::pb::serial_msg >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:pb.msg_bag)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pb::serial_msg > msgs_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_test_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_test_2eproto();
  #endif
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static msg_bag* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// serial_msg

// optional uint64 timestamp = 1;
inline void serial_msg::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 serial_msg::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.serial_msg.timestamp)
  return timestamp_;
}
inline void serial_msg::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.serial_msg.timestamp)
}

// optional .pb.serial_msg.Msg_type type = 2;
inline void serial_msg::clear_type() {
  type_ = 0;
}
inline ::pb::serial_msg_Msg_type serial_msg::type() const {
  // @@protoc_insertion_point(field_get:pb.serial_msg.type)
  return static_cast< ::pb::serial_msg_Msg_type >(type_);
}
inline void serial_msg::set_type(::pb::serial_msg_Msg_type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.serial_msg.type)
}

// optional uint32 len = 3;
inline void serial_msg::clear_len() {
  len_ = 0u;
}
inline ::google::protobuf::uint32 serial_msg::len() const {
  // @@protoc_insertion_point(field_get:pb.serial_msg.len)
  return len_;
}
inline void serial_msg::set_len(::google::protobuf::uint32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:pb.serial_msg.len)
}

// optional bytes body = 4;
inline void serial_msg::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& serial_msg::body() const {
  // @@protoc_insertion_point(field_get:pb.serial_msg.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void serial_msg::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.serial_msg.body)
}
inline void serial_msg::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.serial_msg.body)
}
inline void serial_msg::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.serial_msg.body)
}
inline ::std::string* serial_msg::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:pb.serial_msg.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* serial_msg::release_body() {
  // @@protoc_insertion_point(field_release:pb.serial_msg.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void serial_msg::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:pb.serial_msg.body)
}

// -------------------------------------------------------------------

// msg_bag

// repeated .pb.serial_msg msgs = 1;
inline int msg_bag::msgs_size() const {
  return msgs_.size();
}
inline void msg_bag::clear_msgs() {
  msgs_.Clear();
}
inline const ::pb::serial_msg& msg_bag::msgs(int index) const {
  // @@protoc_insertion_point(field_get:pb.msg_bag.msgs)
  return msgs_.Get(index);
}
inline ::pb::serial_msg* msg_bag::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.msg_bag.msgs)
  return msgs_.Mutable(index);
}
inline ::pb::serial_msg* msg_bag::add_msgs() {
  // @@protoc_insertion_point(field_add:pb.msg_bag.msgs)
  return msgs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::serial_msg >*
msg_bag::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:pb.msg_bag.msgs)
  return &msgs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::serial_msg >&
msg_bag::msgs() const {
  // @@protoc_insertion_point(field_list:pb.msg_bag.msgs)
  return msgs_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::serial_msg_Msg_type> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
